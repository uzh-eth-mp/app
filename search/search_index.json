{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blockchain data collection Index","text":"<p>Auto-generated documentation index.</p> <p>A full list of Blockchain data collection project modules.</p> <pre><code>    - [App](src/data_collection/app/index.md#app)\n        - [Config](src/data_collection/app/config.md#config)\n        - [Consumer](src/data_collection/app/consumer/index.md#consumer)\n            - [Tx Processor](src/data_collection/app/consumer/tx_processor.md#tx-processor)\n        - [Db](src/data_collection/app/db/index.md#db)\n            - [Exceptions](src/data_collection/app/db/exceptions.md#exceptions)\n            - [Manager](src/data_collection/app/db/manager.md#manager)\n            - [Redis](src/data_collection/app/db/redis.md#redis)\n        - [Kafka](src/data_collection/app/kafka/index.md#kafka)\n            - [Exceptions](src/data_collection/app/kafka/exceptions.md#exceptions)\n            - [Manager](src/data_collection/app/kafka/manager.md#manager)\n        - [Main](src/data_collection/app/main.md#main)\n        - [Model](src/data_collection/app/model/index.md#model)\n            - [Abi](src/data_collection/app/model/abi.md#abi)\n            - [Block](src/data_collection/app/model/block.md#block)\n            - [Contract](src/data_collection/app/model/contract.md#contract)\n            - [Transaction](src/data_collection/app/model/transaction.md#transaction)\n        - [Producer](src/data_collection/app/producer.md#producer)\n        - [Utils](src/data_collection/app/utils/index.md#utils)\n            - [DataCollector](src/data_collection/app/utils/data_collector.md#datacollector)\n            - [EnumAction](src/data_collection/app/utils/enum_action.md#enumaction)\n        - [Web3](src/data_collection/app/web3/index.md#web3)\n            - [BlockExplorer](src/data_collection/app/web3/block_explorer.md#blockexplorer)\n            - [NodeConnector](src/data_collection/app/web3/node_connector.md#nodeconnector)\n            - [Parser](src/data_collection/app/web3/parser.md#parser)\n            - [Flow of event extraction](src/data_collection/app/web3/transaction_events/index.md#flow-of-event-extraction)\n                - [Decorator](src/data_collection/app/web3/transaction_events/decorator.md#decorator)\n                - [Erc20](src/data_collection/app/web3/transaction_events/erc20.md#erc20)\n                - [Erc721](src/data_collection/app/web3/transaction_events/erc721.md#erc721)\n                - [Types](src/data_collection/app/web3/transaction_events/types.md#types)\n                - [Uniswap Pair](src/data_collection/app/web3/transaction_events/uniswap_pair.md#uniswap-pair)\n                - [Uniswapv2 Factory](src/data_collection/app/web3/transaction_events/uniswapv2_factory.md#uniswapv2-factory)\n</code></pre>"},{"location":"configuration/","title":"Configuration","text":"<p>The configuration variables for the data collection process are present in two files (<code>.env</code> and <code>cfg.json</code>).</p> <p>\u26a0\ufe0f Some of the configuration values need to be updated in both configuration files, such as the full <code>node_url</code> or full <code>db_dsn</code>. Please check if updating one file doesn't require the update of some values in the other file before you start the process.</p>"},{"location":"configuration/#env","title":".env","text":"<p>To create an <code>.env</code> file you can copy the provided <code>.env.default</code> and edit the values as needed.</p>"},{"location":"configuration/#available-environment-variables","title":"Available environment variables","text":"ENV_VAR Description Default value <code>PROJECT_NAME</code> Prefix for container names and docker network name \"bdc\" <code>DATA_DIR</code> Persistent data destination directory (PostgreSQL) \"./data\" <code>KAFKA_DATA_DIR</code> Persistent data destination directory (Kafka, Zookeeper) \"./data\" <code>LOG_LEVEL</code> logging level of consumers and producers \"INFO\" <code>DATA_UID</code> Data directory owner ID (can be left blank) <code>id -u</code> <code>DATA_GID</code> Data directory owner group ID (can be left blank) <code>getent group bdlt \\| cut -d: -f3</code> <code>N_CONSUMERS</code> Number of consumers to use for each topic (blockchain) 2 <code>N_CONSUMER_INSTANCES</code> Number of DataConsumer instances per consumer container 2 <code>KAFKA_N_PARTITIONS</code> The number of partitions per topic <code>2 * N_CONSUMERS * N_CONSUMER_INSTANCES</code> <code>SENTRY_DSN</code> DSN for error monitoring via Sentry (optional) None <code>POSTGRES_PORT</code> Published host port for PostgreSQL 13338 <code>POSTGRES_USER</code> Username for connecting to PostgreSQL service \"username\" <code>POSTGRES_PASSWORD</code> Password for connecting to PostgreSQL service \"postgres\" <code>POSTGRES_DB</code> PostgreSQL default database name \"db\" <code>ERIGON_PORT</code> Port of the erigon node 8547 <code>ERIGON_HOST</code> Host of the erigon node \"host.docker.internal\" <code>WEB3_REQUESTS_TIMEOUT</code> Timeout for every web3 request (in seconds) 30 <code>WEB3_REQUESTS_RETRY_LIMIT</code> Amount of retries for each failed web3 request 10 <code>WEB3_REQUESTS_RETRY_DELAY</code> Time delay between retries (in seconds) 5 <code>KAFKA_EVENT_RETRIEVAL_TIMEOUT</code> Timeout before exiting consumers after not receiving any event (in seconds) 600"},{"location":"configuration/#cfgjson","title":"cfg.json","text":"<p>The configuration json files are used for selecting the data collection mode.</p> <p>A sample configuration file for the Ethereum blockchain with partial collection mode to collect USDT Transfers within blocks 13000000 and 13000020: <pre><code>{\n    \"node_url\": \"http://host.docker.internal:8547\",\n    \"db_dsn\": \"postgres://user:postgres@db_pool:6432/db\",\n    \"redis_url\": \"redis://redis\",\n    \"kafka_url\": \"kafka:9092\",\n    \"kafka_topic\": \"eth\",\n    \"data_collection\": [\n        {\n            \"mode\": \"partial\",\n            \"start_block\": 13000000,\n            \"end_block\": 13000020,\n            \"contracts\": [\n                {\n                    \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n                    \"symbol\": \"USDT\",\n                    \"category\": \"erc20\",\n                    \"events\": [\n                        \"TransferFungibleEvent\"\n                    ]\n                }\n            ]\n        }\n    ]\n}\n</code></pre></p>"},{"location":"configuration/#data-collection-mode","title":"Data collection mode","text":"<ol> <li><code>\"partial\"</code> = the default mode, only store the web3 data of contracts and events defined in config.json<ul> <li>required fields: <code>start_block</code>, <code>end_block</code>, <code>contracts</code> <pre><code>\"data_collection\": [\n    {\n        \"mode\": \"partial\",\n        \"start_block\": 16804500,\n        \"end_block\": 17100000,\n        \"contracts\": [...]\n    }\n]\n</code></pre></li> <li>transaction, internal transactions and logs are stored if:<ul> <li><code>to_address</code> of the transaction is one of the contracts addresses</li> <li><code>address</code> of any log in a transaction is one of the contracts addresses</li> <li><code>contractAddress</code> of the transaction receipt is one of the contract addresess</li> </ul> </li> </ul> </li> <li><code>\"full\"</code> = store all web3 data (all transactions) within some block range (including internal transactions and logs)<ul> <li>required fields: <code>start_block</code>, <code>end_block</code> <pre><code>\"data_collection\": [\n    {\n        \"mode\": \"full\",\n        \"start_block\": 16804500,\n        \"end_block\": 17100000\n    }\n]\n</code></pre></li> </ul> </li> <li><code>\"get_logs\"</code> = producers send transactions received from the <code>eth_getLogs</code> RPC method to the consumers<ul> <li>required fields: <code>params</code> (same spec as for <code>eth_getLogs</code>) <pre><code>\"data_collection\": [\n    {\n        \"mode\": \"get_logs\",\n        \"params\": {\n            \"fromBlock\": 123,\n            \"toBlock\": 456,\n            \"topics\": [...],\n            \"address\": \"0x...\"\n        }\n    }\n]\n</code></pre></li> </ul> </li> <li><code>\"log_filter\"</code> = (not/partially implemented) <code>get_all_entries</code> method on web3.filter doesn't work with erigon</li> </ol>"},{"location":"configuration/#contracts-field","title":"<code>contracts</code> field","text":"<p>The contracts field is an array of objects that describe a contract and the events that should be collected.</p> <p>Example contract object for USDT for which three events are collected: <pre><code>{\n    \"address\": \"0xdAC17F958D2ee523a2206206994597C13D831ec7\",\n    \"symbol\": \"USDT\",\n    \"category\": \"erc20\",\n    \"events\": [\n        \"TransferFungibleEvent\",\n        \"MintFungibleEvent\",\n        \"BurnFungibleEvent\"\n    ]\n}\n</code></pre></p> <p>| Field | Type | Description | Required | |---|---|---| | <code>address</code> | string | the address of a contract | Yes | | <code>symbol</code> | string | symbol of the contract (only used for convenience in the config file) | No | | <code>category</code> | string | category of a contract, has to be matching one of the keys defined in <code>contract_abi.json</code> | Yes | | <code>events</code> | array of string | exhaustive list of all events that will result in data being saved in the db | Yes |</p>"},{"location":"configuration/#params-field","title":"<code>params</code> field","text":"<p>The params field is an object which will be directly passed to the web3 <code>eth_getLogs</code> RPC method call.</p> <p>Example params object: <pre><code>{\n    \"fromBlock\": 123,\n    \"toBlock\": 456,\n    \"topics\": [...],\n    \"address\": \"0x...\"\n}\n</code></pre></p>"},{"location":"contributing/","title":"Contributing","text":"<ol> <li><code>git clone</code> the repo and <code>cd</code> into it</li> <li>(optional but highly recommended, CI on PR will fail anyway) <code>pre-commit install</code>, or install pre-commit first</li> <li>If installing pre-commit on abacus3, you might need to check if you're using virtualenv v20.4.0 with <code>virtualenv --version</code>. If not, then <code>pip uninstall virtualenv -y</code> and then check if the global packge is now v20.4.0. This SO answer has more details in case pre-commit doesn't work.</li> <li>Otherwise if not using pre-commit, need to run <code>black</code> and <code>isort</code> manually to avoid failing CI style checks.</li> <li>fork the main branch and add your features or a fix</li> <li>follow conventional commits to get automatic changelogs and release functionality</li> <li>Open a PR and wait for CI checks and tests to pass.</li> </ol>"},{"location":"contributing/#ci","title":"CI","text":"<p>This project leverages multiple github actions for: 1. testing 2. code style checks 2. release / versioning 3. documentation</p> Action Trigger Branch Unit tests on push of <code>.py</code> file change !main DB Integration tests on push of sql or redis file changes !main Code Style checks on push to a branch with a PR !main Release Please on push to main main Publish docs on release published any/none Publish docker images on release published any/none"},{"location":"example/","title":"Example","text":"<p>This document shows a very simple few step example of configuration, orchestration and the output of running the application stack in both environments.</p> <p>This example will: * start 1 producer that will insert all transactions into Kafka in the block range 13000000-13000020 * start 2 consumers that will consume all transactions from Kafka and only save data for those that are related to USDT and contain a Transfer event in the logs * stop all containers after 10 minutes of no events received from Kafka in all consumers.</p>"},{"location":"example/#configuration","title":"Configuration","text":"<p>Use the same configuration as shown in docs/configuration.md. You may only need to adjust the <code>node_url</code>.</p> <p>Copy this configuration into src/data_collection/etc/cfg/dev/eth.json and src/data_collection/etc/cfg/prod/eth.json.</p> <p>Make sure to also have an <code>.env</code> file in the root of the repository (<code>cp .env.default .env</code>)</p>"},{"location":"example/#running-in-development-mode","title":"Running in development mode","text":"<p>Running in development mode only requires to start the <code>run-dev-eth.sh</code> script like so:</p> <pre><code>$ ./scripts/run-dev-eth.sh\nls: cannot access './data-dev/kafka-data/kafka-logs/': No such file or directory\nBuilding containers...\n[+] Building 0.9s (50/50) FINISHED\n...\n&lt;a lot of docker build logs in here&gt;\n...\nData collection starting...\nAdding containers to network 'bdc-dev_default'\nDone; following container logs...\nbdc-dev-data_producer_eth-1  | Waiting for Kafka container to start...\nbdc-dev-data_consumer_eth-2  | Waiting for Kafka container to start...\nbdc-dev-data_consumer_eth-1  | Waiting for Kafka container to start...\nbdc-dev-data_producer_eth-1  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-dev-data_consumer_eth-2  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-dev-data_consumer_eth-1  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:53.188 __main__ INFO     Starting producer-eth\nbdc-dev-data_consumer_eth-2  | 2023-06-26 12:55:53.336 __main__ INFO     Starting consumer-eth\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:53.342 app.producer INFO     Using config: {'node_url': AnyUrl('http://host.docker.internal:8547', scheme='http', host='host.docker.internal', tld='internal', host_type='domain', port='8547'), 'db_dsn': PostgresDsn('postgres://user:postgres@db_pool:6432/db', ), 'sentry_dsn': '', 'redis_url': RedisDsn('redis://redis:6379/0', ), 'kafka_url': 'kafka:9092', 'kafka_topic': 'eth', 'number_of_consumer_tasks': 2, 'web3_requests_timeout': 30, 'web3_requests_retry_limit': 10, 'web3_requests_retry_delay': 5, 'kafka_event_retrieval_timeout': 600}\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:53.342 app.producer INFO     Creating data collection producer task ({'mode': &lt;DataCollectionMode.PARTIAL: 'partial'&gt;, 'start_block': 13000000, 'end_block': 13000020, 'topics': None, 'params': None, 'contracts': ['USDT']})\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:53.342 app.producer INFO     Found 4 partition(s) on topic 'eth'\nbdc-dev-data_consumer_eth-1  | 2023-06-26 12:55:53.386 __main__ INFO     Starting consumer-eth\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:53.484 app.producer INFO     Starting from block #13000000, expecting to finish at block #13000020\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:54.001 app.producer INFO     Finished at block #13000020 | total produced transactions: 4066\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:54.001 app.producer INFO     Finished producing data from all data collection tasks.\nbdc-dev-data_producer_eth-1  | 2023-06-26 12:55:54.001 __main__ INFO     Exiting producer-eth with code 0\nbdc-dev-data_producer_eth-1 exited with code 0\nbdc-dev-data_consumer_eth-1  | 2023-06-26 12:56:03.800 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [3, 1]\nbdc-dev-data_consumer_eth-2  | 2023-06-26 12:56:03.802 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [2, 0]\nbdc-dev-data_consumer_eth-2  | 2023-06-26 13:06:57.463 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-dev-data_consumer_eth-2  | 2023-06-26 13:06:57.478 app.consumer INFO     Finished processing topic 'eth'.\nbdc-dev-data_consumer_eth-2  | 2023-06-26 13:06:57.478 app.consumer INFO     number of consumed transactions: 1736 | number of processed transactions: 124\nbdc-dev-data_consumer_eth-2  | 2023-06-26 13:06:57.479 __main__ INFO     Exiting consumer-eth with code 0\nbdc-dev-data_consumer_eth-2 exited with code 0\nbdc-dev-data_consumer_eth-1  | 2023-06-26 13:07:34.552 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-dev-data_consumer_eth-1  | 2023-06-26 13:07:34.559 app.consumer INFO     Finished processing topic 'eth'.\nbdc-dev-data_consumer_eth-1  | 2023-06-26 13:07:34.559 app.consumer INFO     number of consumed transactions: 2330 | number of processed transactions: 140\nbdc-dev-data_consumer_eth-1  | 2023-06-26 13:07:34.560 __main__ INFO     Exiting consumer-eth with code 0\nbdc-dev-data_consumer_eth-1 exited with code 0\nStarting cleanup; removing containers...\n[+] Running 9/9\n \u283f Container bdc-dev-data_consumer_eth-1  Removed                                                                                                                                                                                                         0.0s\n \u283f Container bdc-dev-db_pool-1            Removed                                                                                                                                                                                                         0.5s\n \u283f Container bdc-dev-data_consumer_eth-2  Removed                                                                                                                                                                                                         0.0s\n \u283f Container bdc-dev-data_producer_eth-1  Removed                                                                                                                                                                                                         0.0s\n \u283f Container bdc-dev-redis-1              Removed                                                                                                                                                                                                         0.5s\n \u283f Container bdc-dev-kafka-1              Removed                                                                                                                                                                                                         2.3s\n \u283f Container bdc-dev-db-1                 Removed                                                                                                                                                                                                         0.7s\n \u283f Container bdc-dev-zookeeper-1          Removed                                                                                                                                                                                                         0.6s\n \u283f Network bdc-dev_default                Removed                                                                                                                                                                                                         0.2s\nCleanup successful.\n$\n</code></pre> <p>After 10 minutes of inactivity, consumers will shutdown. If no consumers are running, the rest of containers will shutdown. Now you can use the collected postgresql data in <code>./data-dev</code>. <pre><code>$ ls -h data-dev\nkafka-data  postgresql-data  zookeeper-data\n</code></pre></p>"},{"location":"example/#running-in-production-mode","title":"Running in production mode","text":"<pre><code>\u25b6 ./scripts/run-prod-eth.sh\nBuilding containers...\n[+] Building 0.6s (50/50) FINISHED                                                                                                                                                                                   4.1s\nData collection starting...\nAdding containers to network 'bdc_default'\nDone; following container logs...\nbdc-data_producer_eth-1  | Waiting for Kafka container to start...\nbdc-data_consumer_eth-1  | Waiting for Kafka container to start...\nbdc-data_consumer_eth-2  | Waiting for Kafka container to start...\nbdc-data_producer_eth-1  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-data_consumer_eth-2  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-data_consumer_eth-1  | Kafka container alive. Waiting 15s for Kafka startup script to finish...\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.013 __main__ INFO     Starting producer-eth\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.181 app.producer INFO     Using config: {'node_url': AnyUrl('http://host.docker.internal:8547', scheme='http', host='host.docker.internal', tld='internal', host_type='domain', port='8547'), 'db_dsn': PostgresDsn('postgres://user:postgres@db_pool:6432/db', ), 'sentry_dsn': '', 'redis_url': RedisDsn('redis://redis:6379/0', ), 'kafka_url': 'kafka:9092', 'kafka_topic': 'eth', 'number_of_consumer_tasks': 2, 'web3_requests_timeout': 30, 'web3_requests_retry_limit': 10, 'web3_requests_retry_delay': 5, 'kafka_event_retrieval_timeout': 600}\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.181 app.producer INFO     Creating data collection producer task ({'mode': &lt;DataCollectionMode.PARTIAL: 'partial'&gt;, 'start_block': 13000000, 'end_block': 13000020, 'topics': None, 'params': None, 'contracts': ['USDT']})\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.181 app.producer INFO     Found 8 partition(s) on topic 'eth'\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.318 app.producer INFO     Starting from block #13000000, expecting to finish at block #13000020\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.747 app.producer INFO     Finished at block #13000020 | total produced transactions: 4066\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.747 app.producer INFO     Finished producing data from all data collection tasks.\nbdc-data_producer_eth-1  | 2023-06-26 13:34:39.748 __main__ INFO     Exiting producer-eth with code 0\nbdc-data_consumer_eth-2  | 2023-06-26 13:34:39.852 __main__ INFO     Starting consumer-eth\nbdc-data_consumer_eth-1  | 2023-06-26 13:34:39.911 __main__ INFO     Starting consumer-eth\nbdc-data_producer_eth-1 exited with code 0\nbdc-data_consumer_eth-2  | 2023-06-26 13:34:49.929 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [2, 6]\nbdc-data_consumer_eth-2  | 2023-06-26 13:34:49.930 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [1, 5]\nbdc-data_consumer_eth-1  | 2023-06-26 13:34:49.930 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [4, 0]\nbdc-data_consumer_eth-1  | 2023-06-26 13:34:49.930 app.kafka.manager INFO     Consuming events in topic 'eth' for partitions: [7, 3]\nbdc-data_consumer_eth-2  | 2023-06-26 13:44:58.775 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-data_consumer_eth-2  | 2023-06-26 13:44:58.791 app.consumer INFO     Finished processing topic 'eth'.\nbdc-data_consumer_eth-2  | 2023-06-26 13:44:58.791 app.consumer INFO     number of consumed transactions: 785 | number of processed transactions: 65\nbdc-data_consumer_eth-2  | 2023-06-26 13:45:01.040 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-data_consumer_eth-2  | 2023-06-26 13:45:01.044 app.consumer INFO     Finished processing topic 'eth'.\nbdc-data_consumer_eth-2  | 2023-06-26 13:45:01.044 app.consumer INFO     number of consumed transactions: 942 | number of processed transactions: 64\nbdc-data_consumer_eth-2  | 2023-06-26 13:45:01.045 __main__ INFO     Exiting consumer-eth with code 0\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:02.036 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:02.039 app.consumer INFO     Finished processing topic 'eth'.\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:02.039 app.consumer INFO     number of consumed transactions: 1216 | number of processed transactions: 59\nbdc-data_consumer_eth-2 exited with code 0\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:03.936 app.kafka.manager INFO     No event received for 600 seconds from any partition - timed out\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:03.942 app.consumer INFO     Finished processing topic 'eth'.\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:03.942 app.consumer INFO     number of consumed transactions: 1123 | number of processed transactions: 76\nbdc-data_consumer_eth-1  | 2023-06-26 13:45:03.942 __main__ INFO     Exiting consumer-eth with code 0\nbdc-data_consumer_eth-1 exited with code 0\n^Ccanceled\n$\n</code></pre> <p>Now you can use the collected postgresql data in <code>./data</code> to start (or connect) to the database. <pre><code>$ ls -h data\nkafka-data  postgresql-data  zookeeper-data\n</code></pre></p> <p>If you need to shut down the containers while they are still collecting data, you can use <pre><code>$ bash scripts/stop-prod-eth.sh\n</code></pre></p>"},{"location":"extensions/","title":"Extensions","text":""},{"location":"extensions/#add-new-event","title":"Add new Event","text":"<p>TODO: Description of how to add an event goes here</p>"},{"location":"extensions/#add-new-contract-abi","title":"Add new Contract ABI","text":"<p>TODO: Description of how to add a Contract ABI goes here</p>"},{"location":"extensions/#add-new-data-collection-mode","title":"Add new data collection mode","text":"<p>Adding a new data collection / processing mode can be useful if you want to make use of parallelization via Kafka workers. This is an example on how we added the <code>get_logs</code> data collection mode.</p> <ol> <li>Add new <code>DataCollectionMode</code> enum value in app/model/init.py.</li> <li><code>GET_LOGS = auto()</code></li> <li>add documentation if needed</li> <li>Update app/config.py if needed</li> <li>(e.g. get_logs method requires 'params' field)     <pre><code>class DataCollectionConfig(BaseSettings):\n    ...\n    params: Optional[Dict[str, Any]]\n    \"\"\"Can be none, required when used with DataCollectionMode.GET_LOGS\n\n    Note:\n        This field has to have the same JSON format as the eth_getLogs RPC method:\n        https://www.quicknode.com/docs/ethereum/eth_getLogs\n    \"\"\"\n</code></pre></li> <li>Update app/producer.py to account for the new <code>DataCollectionMode</code></li> <li>add new method <code>_start_get_logs_producer()</code> to <code>DataProducer</code>.     <pre><code>async def _start_get_logs_producer(\n    self, data_collection_cfg: DataCollectionConfig\n):\n    \"\"\"Start a producer that uses the `eth_getLogs` RPC method to get all the transactions\"\"\"\n</code></pre></li> <li>add <code>match</code> case for the new <code>DataCollectionMode</code> in <code>_start_producer_task()</code> method:     <pre><code>case DataCollectionMode.GET_LOGS:\n    return asyncio.create_task(\n        self._start_get_logs_producer(data_collection_cfg)\n    )\n</code></pre></li> <li>implement <code>_start_get_logs_producer()</code>:</li> <li>call <code>eth_getLogs</code> and then send all transactions to Kafka     <pre><code>    \"\"\"Start a producer that uses the `eth_getLogs` RPC method to get all the transactions\"\"\"\n    # Get logs\n    logs = await self.node_connector.w3.eth.get_logs(filter_params=data_collection_cfg.params)\n\n    # Send them to Kafka\n    if logs:\n        # Encode the logs as kafka events\n        messages = [\n            self.encode_kafka_event(log[\"transactionHash\"].hex(), data_collection_cfg.mode)\n            for log in logs\n        ]\n        # Send all the transaction hashes to Kafka so consumers can process them\n        await self.kafka_manager.send_batch(msgs=messages)\n\n    log.info(f\"Finished collecting {len(logs)} logs\")\n</code></pre></li> <li>(Optional) implement a new transaction processor for the new DataCollectionMode in app/consumer/tx_processor.py</li> <li>Create new class for <code>GetLogsTransactionProcessor</code></li> <li>Update <code>self.tx_processors</code> in <code>DataConsumer</code> to use this new <code>GetLogsTransactionProcessor</code> <pre><code>  self.tx_processors = {\n      ...,\n      DataCollectionMode.GET_LOGS: GetLogsTransactionProcessor(*_tx_processor_args)\n  }\n</code></pre></li> <li>Update the JSON config and run the app</li> </ol>"},{"location":"extensions/#support-more-blockchains","title":"Support more blockchains","text":"<p>TODO:</p>"},{"location":"faq/","title":"Frequently Asked Questions","text":"<ul> <li>How do I start this locally on my pc?<ol> <li>create and confgure an <code>.env</code> file. You can copy the default one as a starter <code>cp .env.default .env</code>.</li> <li>configure <code>src/data_collection/etc/cfg/dev/&lt;blockchain&gt;.json</code> (depending on your blockchain)</li> <li>run <code>bash scripts/run-dev-&lt;blockchain&gt;.sh</code></li> </ol> </li> <li>How do I start this on Abacus-3?<ol> <li>create and confgure an <code>.env</code> file. You can copy the default one as a starter <code>cp .env.default .env</code>.</li> <li>configure <code>src/data_collection/etc/cfg/prod/&lt;blockchain&gt;.json</code> (depending on your blockchain)</li> <li>run <code>bash scripts/run-prod-&lt;blockchain&gt;.sh</code></li> </ol> </li> <li>How do I stop the process?<ul> <li>Use <code>KeyboardInterrupt</code> (<code>Ctrl+C</code>). Or <code>kill</code> if used in the bg.</li> <li>After stopping, all the containers are stopped, but volume data is preserved.</li> </ul> </li> <li>Is it possible to start multiple of these at the same time?<ul> <li>Yes, simply change the data directory (<code>DATA_DIR</code>) and the prefix of the containers (<code>PROJECT_NAME</code>) in the <code>.env</code> file.</li> </ul> </li> <li>Does the run script stop / cleanup all the containers when the configured data collection is finished?<ul> <li>Yes. The consumers wait 5 minutes after the last received event before shutting themselves down. Producer closes immediately after the collection process has been finished. Other containers close when consumers and producers are down.</li> </ul> </li> <li>How many topics and consumers should I use?<ul> <li>Depends on the machine you're running on, but generally the more consumers and topics, the faster the processing.</li> </ul> </li> <li>Why does the production environment add an Erigon proxy service instead of just using <code>host.docker.internal</code> within the consumers / producers?<ul> <li>This reverse proxy is used as a workaround for the abacus-3 firewall. Currently the firewall rules only allow the default docker0 interface to send outbound requests to the host machine. This means that any container started with <code>docker run --add-host=host.docker.internal:host-gateway ...</code> will be able to reach the host. This works because the default docker network used for any <code>docker run</code> is the 'bridge' which has its default gateway set to the docker0 interface address. However, as soon as you attempt to do this inside of a docker compose (<code>extra_hosts: host.docker.internal:host-gateway</code>), it stops working. This is because the compose creates a separate docker network which has a random gateway address used for communication with the host. In theory, you could set up a custom docker network with a static gateway address inside of the compose and add this address to the firewall rules, but that wasn't possible at the time of development.</li> </ul> </li> <li>Why am I seeing <code>Unable connect to \"kafka:9092\": [Errno 111] Connect call failed ('&lt;container_ip&gt;', 9092)</code> in the logs?<ul> <li>The producers and consumers attempt to connect to the Kafka container as soon as they're started. However the Kafka container takes some time and is usually &lt;15s but sometimes it takes a bit longer. These messages are generated by the internal kafka library that is used within the project and can be ignored.</li> </ul> </li> <li>Why am I seeing <code>Group Coordinator Request failed: [Error 15] CoordinatorNotAvailableError</code> in the logs?<ul> <li>Another Kafka internal log that can be ignored, the coordinator is eventually selected and this error is irrelevant.</li> </ul> </li> <li>Why am I seeing <code>Heartbeat failed for group eth because it is rebalancing</code> in the logs?<ul> <li>Another Kafka internal log that can be ignored. Happens when the number of consumers changes because kafka has to rebalance the partitions for a topic.</li> </ul> </li> <li><code>asyncpg.exceptions.ProtocolViolationError: the database system is not yet accepting connections</code><ul> <li>Very rarely, usually after moving the data directory, the PostgreSQL service won't start in time and you'll see this error right after starting the data collection process. The solution is to just restart the process after this occurs.</li> </ul> </li> </ul>"},{"location":"src/data_collection/app/","title":"App","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App</p> <p>Auto-generated documentation for src.data_collection.app module.</p>"},{"location":"src/data_collection/app/#init_logger","title":"init_logger","text":"<p>Show source in init.py:9</p> <p>Create and return a custom logger</p>"},{"location":"src/data_collection/app/#signature","title":"Signature","text":"<pre><code>def init_logger(name):\n...\n</code></pre>"},{"location":"src/data_collection/app/#modules","title":"Modules","text":"<ul> <li>Config</li> <li>Consumer</li> <li>Db</li> <li>Kafka</li> <li>Main</li> <li>Model</li> <li>Producer</li> <li>Utils</li> <li>Web3</li> </ul>"},{"location":"src/data_collection/app/config/","title":"Config","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Config</p> <p>Auto-generated documentation for src.data_collection.app.config module.</p>"},{"location":"src/data_collection/app/config/#config_1","title":"Config","text":"<p>Show source in config.py:141</p> <p>App configuration file</p>"},{"location":"src/data_collection/app/config/#signature","title":"Signature","text":"<pre><code>class Config(BaseSettings):\n...\n</code></pre>"},{"location":"src/data_collection/app/config/#contractconfig","title":"ContractConfig","text":"<p>Show source in config.py:22</p> <p>Describe a smart contract that the consumers should save data for</p> <p>For instance USDT, UniswapV2Factory or some UniswapPair</p>"},{"location":"src/data_collection/app/config/#signature_1","title":"Signature","text":"<pre><code>class ContractConfig(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/config/#contractconfigcheck_if_events_are_matching_event_names_in_web3_types","title":"ContractConfig().check_if_events_are_matching_event_names_in_web3_types","text":"<p>Show source in config.py:44</p> <p>Check if each of the items in 'events' field is one of the ContractEvent.name defined in types.py</p>"},{"location":"src/data_collection/app/config/#signature_2","title":"Signature","text":"<pre><code>@validator(\"events\")\ndef check_if_events_are_matching_event_names_in_web3_types(cls, values):\n...\n</code></pre>"},{"location":"src/data_collection/app/config/#datacollectionconfig","title":"DataCollectionConfig","text":"<p>Show source in config.py:78</p> <p>Store data collection configuration settings.</p> <p>Each data collection config will start producing transactions depending on its mode.</p>"},{"location":"src/data_collection/app/config/#signature_3","title":"Signature","text":"<pre><code>class DataCollectionConfig(BaseSettings):\n...\n</code></pre>"},{"location":"src/data_collection/app/config/#datacollectionconfigblock_order_correct","title":"DataCollectionConfig().block_order_correct","text":"<p>Show source in config.py:111</p> <p>Check if start_block &lt;= end_block</p>"},{"location":"src/data_collection/app/config/#signature_4","title":"Signature","text":"<pre><code>@root_validator\ndef block_order_correct(cls, values):\n...\n</code></pre>"},{"location":"src/data_collection/app/config/#datacollectionconfigmode_not_missing_fields","title":"DataCollectionConfig().mode_not_missing_fields","text":"<p>Show source in config.py:125</p> <p>Validate fields not missing for each mode</p>"},{"location":"src/data_collection/app/config/#signature_5","title":"Signature","text":"<pre><code>@root_validator\ndef mode_not_missing_fields(cls, values):\n...\n</code></pre>"},{"location":"src/data_collection/app/main/","title":"Main","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Main</p> <p>Auto-generated documentation for src.data_collection.app.main module.</p>"},{"location":"src/data_collection/app/main/#main_1","title":"main","text":"<p>Show source in main.py:52</p> <p>Load CLI args, json config and start the app with asyncio</p>"},{"location":"src/data_collection/app/main/#signature","title":"Signature","text":"<pre><code>def main():\n...\n</code></pre>"},{"location":"src/data_collection/app/main/#start","title":"start","text":"<p>Show source in main.py:20</p>"},{"location":"src/data_collection/app/main/#signature_1","title":"Signature","text":"<pre><code>async def start(args: argparse.Namespace, config: Config):\n...\n</code></pre>"},{"location":"src/data_collection/app/producer/","title":"Producer","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Producer</p> <p>Auto-generated documentation for src.data_collection.app.producer module.</p>"},{"location":"src/data_collection/app/producer/#dataproducer","title":"DataProducer","text":"<p>Show source in producer.py:18</p> <p>Produce block / transaction data from the blockchain (node) to a Kafka topic.</p> <p>This class also updates the database with block data and saves the state of processing (latest_processed_block).</p>"},{"location":"src/data_collection/app/producer/#signature","title":"Signature","text":"<pre><code>class DataProducer(DataCollector):\ndef __init__(self, config: Config) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/producer/#dataproducerstart_producing_data","title":"DataProducer().start_producing_data","text":"<p>Show source in producer.py:229</p> <p>Start a subproducer for each data collection config object and wait until they all finish.</p>"},{"location":"src/data_collection/app/producer/#returns","title":"Returns","text":"<ul> <li><code>exit_code</code> - 0 if no exceptions encountered during data collection, 1 otherwise</li> </ul>"},{"location":"src/data_collection/app/producer/#signature_1","title":"Signature","text":"<pre><code>async def start_producing_data(self) -&gt; int:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/","title":"Consumer","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Consumer</p> <p>Auto-generated documentation for src.data_collection.app.consumer module.</p>"},{"location":"src/data_collection/app/consumer/#dataconsumer","title":"DataConsumer","text":"<p>Show source in init.py:29</p> <p>Consume transaction hash from a given Kafka topic and save all required data to PostgreSQL.</p>"},{"location":"src/data_collection/app/consumer/#signature","title":"Signature","text":"<pre><code>class DataConsumer(DataCollector):\ndef __init__(self, config: Config, contract_abi: ContractABI) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/#dataconsumerstart_consuming_data","title":"DataConsumer().start_consuming_data","text":"<p>Show source in init.py:105</p> <p>Start an infinite loop of consuming data from a given topic.</p>"},{"location":"src/data_collection/app/consumer/#returns","title":"Returns","text":"<ul> <li><code>exit_code</code> - 0 if no exceptions encountered during data collection, 1 otherwise</li> </ul>"},{"location":"src/data_collection/app/consumer/#signature_1","title":"Signature","text":"<pre><code>async def start_consuming_data(self) -&gt; int:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/#kafka_logs_filter","title":"kafka_logs_filter","text":"<p>Show source in init.py:20</p> <p>Filters out some kafka logs</p>"},{"location":"src/data_collection/app/consumer/#signature_2","title":"Signature","text":"<pre><code>def kafka_logs_filter(record) -&gt; bool:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/#modules","title":"Modules","text":"<ul> <li>Tx Processor</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/","title":"Tx Processor","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Consumer / Tx Processor</p> <p>Auto-generated documentation for src.data_collection.app.consumer.tx_processor module.</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#fulltransactionprocessor","title":"FullTransactionProcessor","text":"<p>Show source in tx_processor.py:376</p> <p>Process transactions with mode full</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#notes","title":"Notes","text":"<p>Directly save every tx data to db without any further processing.</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature","title":"Signature","text":"<pre><code>class FullTransactionProcessor(TransactionProcessor):\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#see-also","title":"See also","text":"<ul> <li>TransactionProcessor</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/#fulltransactionprocessorprocess_transaction","title":"FullTransactionProcessor().process_transaction","text":"<p>Show source in tx_processor.py:383</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_1","title":"Signature","text":"<pre><code>async def process_transaction(\nself,\ntx_data: TransactionData,\ntx_receipt_data: TransactionReceiptData,\nw3_tx_receipt: TxReceipt,\n) -&gt; bool:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#logfiltertransactionprocessor","title":"LogFilterTransactionProcessor","text":"<p>Show source in tx_processor.py:398</p> <p>Process transactions with mode log_filter</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_2","title":"Signature","text":"<pre><code>class LogFilterTransactionProcessor(TransactionProcessor):\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#see-also_1","title":"See also","text":"<ul> <li>TransactionProcessor</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/#partialtransactionprocessor","title":"PartialTransactionProcessor","text":"<p>Show source in tx_processor.py:237</p> <p>Process transactions with mode partial</p> <p>Save only the transactions that are related to the contracts in the config and only their respective events.</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#notes_1","title":"Notes","text":"<p>This processor (<code>process_transaction</code>) covers 3 distinct cases of when we want to save a transaction: 1. Regular contract interaction (to_address=address in config) 2. Contract creation (receipt.contract_address=address in config) 3. Transaction event (any eventLog.address=address in config)</p> <p>If one of the above cases is true, we save the transaction and its events (if event.address is in config).</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_3","title":"Signature","text":"<pre><code>class PartialTransactionProcessor(TransactionProcessor):\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#see-also_2","title":"See also","text":"<ul> <li>TransactionProcessor</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/#partialtransactionprocessorprocess_transaction","title":"PartialTransactionProcessor().process_transaction","text":"<p>Show source in tx_processor.py:340</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_4","title":"Signature","text":"<pre><code>async def process_transaction(\nself,\ntx_data: TransactionData,\ntx_receipt_data: TransactionReceiptData,\nw3_tx_receipt: TxReceipt,\n) -&gt; bool:\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#transactionprocessor","title":"TransactionProcessor","text":"<p>Show source in tx_processor.py:26</p> <p>Base class for processing any transaction data</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_5","title":"Signature","text":"<pre><code>class TransactionProcessor:\ndef __init__(self, db_manager, node_connector, contract_parser):\n...\n</code></pre>"},{"location":"src/data_collection/app/consumer/tx_processor/#transactionprocessorprocess_transaction","title":"TransactionProcessor().process_transaction","text":"<p>Show source in tx_processor.py:218</p> <p>Process transaction data (implemented by subclasses)</p>"},{"location":"src/data_collection/app/consumer/tx_processor/#arguments","title":"Arguments","text":"<ul> <li><code>tx_data</code> TransactionData - Transaction data</li> <li><code>tx_receipt_data</code> TransactionReceiptData - Transaction receipt data</li> <li><code>w3_tx_receipt</code> TxReceipt - transaction receipt data in web3 format</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/#returns","title":"Returns","text":"<ul> <li><code>bool</code> - True if the transaction was processed, False otherwise</li> </ul>"},{"location":"src/data_collection/app/consumer/tx_processor/#signature_6","title":"Signature","text":"<pre><code>async def process_transaction(\nself,\ntx_data: TransactionData,\ntx_receipt_data: TransactionReceiptData,\nw3_tx_receipt: TxReceipt,\n) -&gt; bool:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/","title":"Db","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Db</p> <p>Auto-generated documentation for src.data_collection.app.db module.</p>"},{"location":"src/data_collection/app/db/#modules","title":"Modules","text":"<ul> <li>Exceptions</li> <li>Manager</li> <li>Redis</li> </ul>"},{"location":"src/data_collection/app/db/exceptions/","title":"Exceptions","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Db / Exceptions</p> <p>Auto-generated documentation for src.data_collection.app.db.exceptions module.</p>"},{"location":"src/data_collection/app/db/exceptions/#unknownblockidentifier","title":"UnknownBlockIdentifier","text":"<p>Show source in exceptions.py:1</p> <p>Raised when an unknown type of identifier is passed to a method.</p>"},{"location":"src/data_collection/app/db/exceptions/#signature","title":"Signature","text":"<pre><code>class UnknownBlockIdentifier(Exception):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/","title":"Manager","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Db / Manager</p> <p>Auto-generated documentation for src.data_collection.app.db.manager module.</p>"},{"location":"src/data_collection/app/db/manager/#databasemanager","title":"DatabaseManager","text":"<p>Show source in manager.py:12</p> <p>Manage the PostgreSQL connection and CRUD operations.</p> <p>https://magicstack.github.io/asyncpg/current/usage.html</p>"},{"location":"src/data_collection/app/db/manager/#signature","title":"Signature","text":"<pre><code>class DatabaseManager:\ndef __init__(self, postgresql_dsn: str, node_name: str) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerconnect","title":"DatabaseManager().connect","text":"<p>Show source in manager.py:31</p> <p>Connects to the PostgreSQL database.</p>"},{"location":"src/data_collection/app/db/manager/#signature_1","title":"Signature","text":"<pre><code>async def connect(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerdisconnect","title":"DatabaseManager().disconnect","text":"<p>Show source in manager.py:37</p> <p>Disconnect from PostgreSQL</p>"},{"location":"src/data_collection/app/db/manager/#signature_2","title":"Signature","text":"<pre><code>async def disconnect(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerget_block","title":"DatabaseManager().get_block","text":"<p>Show source in manager.py:325</p> <p>Get the block data with a given identifier from the block table.</p>"},{"location":"src/data_collection/app/db/manager/#notes","title":"Notes","text":"<p>If block_identifier is <code>None</code>, returns the latest block data in the table.</p>"},{"location":"src/data_collection/app/db/manager/#returns","title":"Returns","text":"<ul> <li><code>Optional[dict[str,</code> Any]] - if available returns block data as a dict,                           otherwise returns <code>None</code></li> </ul>"},{"location":"src/data_collection/app/db/manager/#signature_3","title":"Signature","text":"<pre><code>async def get_block(\nself, block_identifier: Optional[Union[str, int]] = None\n) -&gt; Optional[dict[str, Any]]:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_block","title":"DatabaseManager().insert_block","text":"<p>Show source in manager.py:42</p> <p>Insert block data into _block table."},{"location":"src/data_collection/app/db/manager/#signature_4","title":"Signature","text":"<pre><code>async def insert_block(\nself,\nblock_number: int,\nblock_hash: str,\nnonce: str,\ndifficulty: int,\ngas_limit: int,\ngas_used: int,\ntimestamp: datetime,\nminer: str,\nparent_hash: str,\nblock_reward: float,\nuncles: list[str],\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_contract","title":"DatabaseManager().insert_contract","text":"<p>Show source in manager.py:211</p> <p>Insert contract data into _contract table."},{"location":"src/data_collection/app/db/manager/#signature_5","title":"Signature","text":"<pre><code>async def insert_contract(\nself, address: str, transaction_hash: str, is_pair_contract: bool\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_contract_supply_change","title":"DatabaseManager().insert_contract_supply_change","text":"<p>Show source in manager.py:258</p> <p>Insert token contract supply change data into _token_contract_supply_change table."},{"location":"src/data_collection/app/db/manager/#signature_6","title":"Signature","text":"<pre><code>async def insert_contract_supply_change(\nself, address: str, amount_changed: int, transaction_hash: str\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_internal_transaction","title":"DatabaseManager().insert_internal_transaction","text":"<p>Show source in manager.py:122</p> <p>Insert internal transaction data into _internal_transaction table."},{"location":"src/data_collection/app/db/manager/#signature_7","title":"Signature","text":"<pre><code>async def insert_internal_transaction(\nself,\ntransaction_hash: str,\nfrom_address: str,\nto_address: str,\nvalue: float,\ngas_limit: float,\ngas_used: int,\ninput_data: str,\ncall_type: str,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_nft_transfer","title":"DatabaseManager().insert_nft_transfer","text":"<p>Show source in manager.py:182</p> <p>Insert nft transfer data into _nft_transfer table."},{"location":"src/data_collection/app/db/manager/#signature_8","title":"Signature","text":"<pre><code>async def insert_nft_transfer(\nself,\ntransaction_hash: str,\nlog_index: int,\naddress: str,\nfrom_address: str,\nto_address: str,\ntoken_id: int,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_pair_contract","title":"DatabaseManager().insert_pair_contract","text":"<p>Show source in manager.py:277</p> <p>Insert pair contract data into _pair_contract table."},{"location":"src/data_collection/app/db/manager/#signature_9","title":"Signature","text":"<pre><code>async def insert_pair_contract(\nself,\naddress: str,\ntoken0_address: str,\ntoken1_address: str,\nreserve0: int,\nreserve1: int,\nfactory: str,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_pair_liquidity_change","title":"DatabaseManager().insert_pair_liquidity_change","text":"<p>Show source in manager.py:305</p> <p>Insert pair liquidity change data into _token_contract_supply_change table."},{"location":"src/data_collection/app/db/manager/#signature_10","title":"Signature","text":"<pre><code>async def insert_pair_liquidity_change(\nself, address: str, amount0: int, amount1: int, transaction_hash: str\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_token_contract","title":"DatabaseManager().insert_token_contract","text":"<p>Show source in manager.py:230</p> <p>Insert token contract data into _token_contract table."},{"location":"src/data_collection/app/db/manager/#signature_11","title":"Signature","text":"<pre><code>async def insert_token_contract(\nself,\naddress: str,\nsymbol: str,\nname: str,\ndecimals: int,\ntotal_supply: int,\ntoken_category: str,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_transaction","title":"DatabaseManager().insert_transaction","text":"<p>Show source in manager.py:81</p> <p>Insert transaction data into _transaction table."},{"location":"src/data_collection/app/db/manager/#signature_12","title":"Signature","text":"<pre><code>async def insert_transaction(\nself,\ntransaction_hash: str,\nblock_number: int,\nfrom_address: str,\nto_address: str,\nvalue: float,\ntransaction_fee: float,\ngas_price: float,\ngas_limit: int,\ngas_used: int,\nis_token_tx: bool,\ninput_data: str,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/manager/#databasemanagerinsert_transaction_logs","title":"DatabaseManager().insert_transaction_logs","text":"<p>Show source in manager.py:153</p> <p>Insert transaction logs data into _transaction_logs table."},{"location":"src/data_collection/app/db/manager/#signature_13","title":"Signature","text":"<pre><code>async def insert_transaction_logs(\nself,\ntransaction_hash: str,\naddress: str,\nlog_index: int,\ndata: str,\nremoved: bool,\ntopics: list[str],\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/redis/","title":"Redis","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Db / Redis</p> <p>Auto-generated documentation for src.data_collection.app.db.redis module.</p>"},{"location":"src/data_collection/app/db/redis/#redismanager","title":"RedisManager","text":"<p>Show source in redis.py:10</p> <p>Manage a Redis DB connection and CRUD operations</p> <p>Mainly used to keep the current number of messages (transaction hashes) in a given topic.</p>"},{"location":"src/data_collection/app/db/redis/#signature","title":"Signature","text":"<pre><code>class RedisManager:\ndef __init__(self, redis_url: str, topic: str) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/redis/#redismanagerdecr_transactions","title":"RedisManager().decr_transactions","text":"<p>Show source in redis.py:43</p> <p>Decrement the number of transactions by one for the given partition</p>"},{"location":"src/data_collection/app/db/redis/#signature_1","title":"Signature","text":"<pre><code>async def decr_transactions(self, partition: int):\n...\n</code></pre>"},{"location":"src/data_collection/app/db/redis/#redismanagerget_lowest_score_partition","title":"RedisManager().get_lowest_score_partition","text":"<p>Show source in redis.py:35</p> <p>Return the name of the partition with the lowest score</p>"},{"location":"src/data_collection/app/db/redis/#signature_2","title":"Signature","text":"<pre><code>async def get_lowest_score_partition(self) -&gt; Optional[int]:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/redis/#redismanagerget_n_transactions","title":"RedisManager().get_n_transactions","text":"<p>Show source in redis.py:27</p> <p>Return the total number of unprocessed transactions from all partitions</p>"},{"location":"src/data_collection/app/db/redis/#signature_3","title":"Signature","text":"<pre><code>async def get_n_transactions(self) -&gt; int:\n...\n</code></pre>"},{"location":"src/data_collection/app/db/redis/#redismanagerincrby_n_transactions","title":"RedisManager().incrby_n_transactions","text":"<p>Show source in redis.py:47</p> <p>Increment the number of transactions for a given partition</p>"},{"location":"src/data_collection/app/db/redis/#signature_4","title":"Signature","text":"<pre><code>async def incrby_n_transactions(self, partition: int, incr_by: int = 1):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/","title":"Kafka","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Kafka</p> <p>Auto-generated documentation for src.data_collection.app.kafka module.</p>"},{"location":"src/data_collection/app/kafka/#modules","title":"Modules","text":"<ul> <li>Exceptions</li> <li>Manager</li> </ul>"},{"location":"src/data_collection/app/kafka/exceptions/","title":"Exceptions","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Kafka / Exceptions</p> <p>Auto-generated documentation for src.data_collection.app.kafka.exceptions module.</p>"},{"location":"src/data_collection/app/kafka/exceptions/#kafkaconsumerpartitionsemptyerror","title":"KafkaConsumerPartitionsEmptyError","text":"<p>Show source in exceptions.py:7</p> <p>Raised when a message is not retrieved from any partition for a some time.</p>"},{"location":"src/data_collection/app/kafka/exceptions/#signature","title":"Signature","text":"<pre><code>class KafkaConsumerPartitionsEmptyError(KafkaManagerError):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/exceptions/#see-also","title":"See also","text":"<ul> <li>KafkaManagerError</li> </ul>"},{"location":"src/data_collection/app/kafka/exceptions/#kafkaconsumertimeouterror","title":"KafkaConsumerTimeoutError","text":"<p>Show source in exceptions.py:13</p> <p>Raised when a TimeoutError happens during consuming transactions.</p>"},{"location":"src/data_collection/app/kafka/exceptions/#notes","title":"Notes","text":"<p>This exception is not raised when simply waiting for new topic events.</p>"},{"location":"src/data_collection/app/kafka/exceptions/#signature_1","title":"Signature","text":"<pre><code>class KafkaConsumerTimeoutError(KafkaManagerError):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/exceptions/#see-also_1","title":"See also","text":"<ul> <li>KafkaManagerError</li> </ul>"},{"location":"src/data_collection/app/kafka/exceptions/#kafkamanagererror","title":"KafkaManagerError","text":"<p>Show source in exceptions.py:1</p> <p>Class for KafkaManager related errors</p>"},{"location":"src/data_collection/app/kafka/exceptions/#signature_2","title":"Signature","text":"<pre><code>class KafkaManagerError(Exception):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/","title":"Manager","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Kafka / Manager</p> <p>Auto-generated documentation for src.data_collection.app.kafka.manager module.</p>"},{"location":"src/data_collection/app/kafka/manager/#kafkaconsumermanager","title":"KafkaConsumerManager","text":"<p>Show source in manager.py:273</p> <p>Manage consuming events from a given Kafka topic</p>"},{"location":"src/data_collection/app/kafka/manager/#signature","title":"Signature","text":"<pre><code>class KafkaConsumerManager(KafkaManager):\ndef __init__(\nself, kafka_url: str, redis_url: str, topic: str, event_retrieval_timeout: int\n) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#see-also","title":"See also","text":"<ul> <li>KafkaManager</li> </ul>"},{"location":"src/data_collection/app/kafka/manager/#kafkaconsumermanagerstart_consuming","title":"KafkaConsumerManager().start_consuming","text":"<p>Show source in manager.py:339</p> <p>Consume messages from a given topic and generate (yield) events</p>"},{"location":"src/data_collection/app/kafka/manager/#arguments","title":"Arguments","text":"<ul> <li><code>on_event_callback</code> - a callback function that is called when a new event is received from Kafka</li> </ul>"},{"location":"src/data_collection/app/kafka/manager/#signature_1","title":"Signature","text":"<pre><code>async def start_consuming(self, on_event_callback: Callable[[str], Awaitable[None]]):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkamanager","title":"KafkaManager","text":"<p>Show source in manager.py:17</p>"},{"location":"src/data_collection/app/kafka/manager/#attributes","title":"Attributes","text":"<ul> <li> <p><code>LINEAR_BACKOFF_DELAY</code> - The delay between connection attempts (in seconds): <code>5</code></p> </li> <li> <p><code>INITIAL_CONNECTION_MAX_ATTEMPTS</code> - The maximum allowed initial connection attempts before the app exits: <code>10</code></p> </li> </ul> <p>Manage the Kafka cluster connection. Base class for KafkaProducerManager and KafkaConsumerManager.</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_2","title":"Signature","text":"<pre><code>class KafkaManager:\ndef __init__(self, kafka_url: str, topic: str, redis_url: str) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkamanagerconnect","title":"KafkaManager().connect","text":"<p>Show source in manager.py:38</p> <p>Connect (with linear backoff) to the kafka cluster.</p>"},{"location":"src/data_collection/app/kafka/manager/#notes","title":"Notes","text":"<p>Retrying with linear backoff is required as the startup time of Kafka is variable (usually 25-35s)</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_3","title":"Signature","text":"<pre><code>async def connect(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkamanagerdisconnect","title":"KafkaManager().disconnect","text":"<p>Show source in manager.py:72</p> <p>Flush pending data and disconnect from the kafka cluster</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_4","title":"Signature","text":"<pre><code>async def disconnect(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkaproducermanager","title":"KafkaProducerManager","text":"<p>Show source in manager.py:78</p> <p>Manage producing events to a given Kafka topic</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_5","title":"Signature","text":"<pre><code>class KafkaProducerManager(KafkaManager):\ndef __init__(self, kafka_url: str, redis_url: str, topic: str) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#see-also_1","title":"See also","text":"<ul> <li>KafkaManager</li> </ul>"},{"location":"src/data_collection/app/kafka/manager/#kafkaproducermanagerlimit_topic_capacity","title":"KafkaProducerManager().limit_topic_capacity","text":"<p>Show source in manager.py:105</p> <p>Decorator that limits the amount of messages in a topic to MAX_MESSAGES_PER_PARTITION * n_partitions</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_6","title":"Signature","text":"<pre><code>def limit_topic_capacity(f):\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkaproducermanagernumber_of_partitions","title":"KafkaProducerManager().number_of_partitions","text":"<p>Show source in manager.py:146</p> <p>Return the number of partitions in this topic</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_7","title":"Signature","text":"<pre><code>@property\nasync def number_of_partitions(self) -&gt; int:\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkaproducermanagersend_batch","title":"KafkaProducerManager().send_batch","text":"<p>Show source in manager.py:198</p> <p>Send a batch of messages to a Kafka broker</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_8","title":"Signature","text":"<pre><code>@limit_topic_capacity\nasync def send_batch(self, msgs: List[str]) -&gt; List[RecordMetadata]:\n...\n</code></pre>"},{"location":"src/data_collection/app/kafka/manager/#kafkaproducermanagersend_message","title":"KafkaProducerManager().send_message","text":"<p>Show source in manager.py:167</p> <p>Send message to a Kafka broker</p>"},{"location":"src/data_collection/app/kafka/manager/#signature_9","title":"Signature","text":"<pre><code>@limit_topic_capacity\nasync def send_message(self, msg: str) -&gt; Optional[RecordMetadata]:\n...\n</code></pre>"},{"location":"src/data_collection/app/model/","title":"Model","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Model</p> <p>Auto-generated documentation for src.data_collection.app.model module.</p>"},{"location":"src/data_collection/app/model/#datacollectionmode","title":"DataCollectionMode","text":"<p>Show source in init.py:15</p> <p>The data collection mode.</p>"},{"location":"src/data_collection/app/model/#signature","title":"Signature","text":"<pre><code>class DataCollectionMode(StrEnum):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/#datacollectionworkertype","title":"DataCollectionWorkerType","text":"<p>Show source in init.py:8</p> <p>The type of the worker: producing or consuming data</p>"},{"location":"src/data_collection/app/model/#signature_1","title":"Signature","text":"<pre><code>class DataCollectionWorkerType(Enum):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/#web3basemodel","title":"Web3BaseModel","text":"<p>Show source in init.py:48</p> <p>Base class for any BaseModel related to web3 data</p>"},{"location":"src/data_collection/app/model/#signature_2","title":"Signature","text":"<pre><code>class Web3BaseModel(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/#web3basemodeltransform_hexbytes","title":"Web3BaseModel().transform_hexbytes","text":"<p>Show source in init.py:51</p> <p>Transforms every HexBytes instance into a string value.</p>"},{"location":"src/data_collection/app/model/#notes","title":"Notes","text":"<p>Any HexBytes value should be implicitly typed as 'str' in the pydantic model inheriting from this class.</p>"},{"location":"src/data_collection/app/model/#signature_3","title":"Signature","text":"<pre><code>@root_validator(allow_reuse=True, pre=True)\ndef transform_hexbytes(cls, values):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/#modules","title":"Modules","text":"<ul> <li>Abi</li> <li>Block</li> <li>Contract</li> <li>Transaction</li> </ul>"},{"location":"src/data_collection/app/model/abi/","title":"Abi","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Model / Abi</p> <p>Auto-generated documentation for src.data_collection.app.model.abi module.</p>"},{"location":"src/data_collection/app/model/abi/#contractabi","title":"ContractABI","text":"<p>Show source in abi.py:6</p> <p>Model for Contract ABIs. The data is loaded from <code>abi.json</code></p>"},{"location":"src/data_collection/app/model/abi/#signature","title":"Signature","text":"<pre><code>class ContractABI(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/block/","title":"Block","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Model / Block</p> <p>Auto-generated documentation for src.data_collection.app.model.block module.</p>"},{"location":"src/data_collection/app/model/block/#blockdata","title":"BlockData","text":"<p>Show source in block.py:9</p> <p>Describes a block given by <code>get_block</code></p>"},{"location":"src/data_collection/app/model/block/#signature","title":"Signature","text":"<pre><code>class BlockData(Web3BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/block/#blockdatatimestamp_to_datetime","title":"BlockData().timestamp_to_datetime","text":"<p>Show source in block.py:24</p> <p>Integer timestamp to datetime.datetime validator</p>"},{"location":"src/data_collection/app/model/block/#signature_1","title":"Signature","text":"<pre><code>@validator(\"timestamp\", pre=True)\ndef timestamp_to_datetime(cls, v):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/contract/","title":"Contract","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Model / Contract</p> <p>Auto-generated documentation for src.data_collection.app.model.contract module.</p>"},{"location":"src/data_collection/app/model/contract/#contractcategory","title":"ContractCategory","text":"<p>Show source in contract.py:7</p>"},{"location":"src/data_collection/app/model/contract/#signature","title":"Signature","text":"<pre><code>class ContractCategory(Enum):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/contract/#contractcategoryis_erc","title":"ContractCategory().is_erc","text":"<p>Show source in contract.py:15</p> <p>Return True if contract category is one of the ERC categories</p>"},{"location":"src/data_collection/app/model/contract/#signature_1","title":"Signature","text":"<pre><code>@property\ndef is_erc(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/contract/#contractcategoryis_uniswap_pair","title":"ContractCategory().is_uniswap_pair","text":"<p>Show source in contract.py:20</p> <p>Return True if contract category is UniswapPair</p>"},{"location":"src/data_collection/app/model/contract/#signature_2","title":"Signature","text":"<pre><code>@property\ndef is_uniswap_pair(self):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/contract/#paircontractdata","title":"PairContractData","text":"<p>Show source in contract.py:38</p> <p>Wrapper for web3 pair contract data that gets inserted into the db</p>"},{"location":"src/data_collection/app/model/contract/#signature_3","title":"Signature","text":"<pre><code>class PairContractData(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/contract/#tokencontractdata","title":"TokenContractData","text":"<p>Show source in contract.py:26</p> <p>Wrapper for web3 contract data that gets inserted into the db</p>"},{"location":"src/data_collection/app/model/contract/#signature_4","title":"Signature","text":"<pre><code>class TokenContractData(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/transaction/","title":"Transaction","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Model / Transaction</p> <p>Auto-generated documentation for src.data_collection.app.model.transaction module.</p>"},{"location":"src/data_collection/app/model/transaction/#internaltransactiondata","title":"InternalTransactionData","text":"<p>Show source in transaction.py:41</p> <p>Describes an internal transaction given by <code>debug_traceTransaction</code></p>"},{"location":"src/data_collection/app/model/transaction/#signature","title":"Signature","text":"<pre><code>class InternalTransactionData(Web3BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/transaction/#internaltransactiondatastrings_to_float","title":"InternalTransactionData().strings_to_float","text":"<p>Show source in transaction.py:52</p>"},{"location":"src/data_collection/app/model/transaction/#signature_1","title":"Signature","text":"<pre><code>@validator(\"value\", \"gas_used\", \"gas_limit\", pre=True)\ndef strings_to_float(cls, v):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/transaction/#transactiondata","title":"TransactionData","text":"<p>Show source in transaction.py:8</p> <p>Describes a transaction given by <code>get_transaction</code></p>"},{"location":"src/data_collection/app/model/transaction/#signature_2","title":"Signature","text":"<pre><code>class TransactionData(Web3BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/transaction/#transactionlogsdata","title":"TransactionLogsData","text":"<p>Show source in transaction.py:21</p> <p>Describes transaction receipt logs given by <code>get_transaction_receipt</code></p>"},{"location":"src/data_collection/app/model/transaction/#signature_3","title":"Signature","text":"<pre><code>class TransactionLogsData(Web3BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/model/transaction/#transactionreceiptdata","title":"TransactionReceiptData","text":"<p>Show source in transaction.py:32</p> <p>Describes a transaction receipt given by <code>get_transaction_receipt</code></p>"},{"location":"src/data_collection/app/model/transaction/#signature_4","title":"Signature","text":"<pre><code>class TransactionReceiptData(Web3BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/utils/","title":"Utils","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Utils</p> <p>Auto-generated documentation for src.data_collection.app.utils module.</p>"},{"location":"src/data_collection/app/utils/#log_producer_progress","title":"log_producer_progress","text":"<p>Show source in init.py:6</p> <p>Log a progress of the producer</p> <p>Shows current block number, total inserted blocks, total progress, estimated time until finish and total transactions in redis.</p>"},{"location":"src/data_collection/app/utils/#signature","title":"Signature","text":"<pre><code>def log_producer_progress(\nlog: logging.Logger,\ni_block: int,\nstart_block: int,\nend_block: int,\nprogress_log_frequency: int,\ninitial_time_counter: float,\nn_transactions: int,\n):\n...\n</code></pre>"},{"location":"src/data_collection/app/utils/#modules","title":"Modules","text":"<ul> <li>DataCollector</li> <li>EnumAction</li> </ul>"},{"location":"src/data_collection/app/utils/data_collector/","title":"DataCollector","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Utils / DataCollector</p> <p>Auto-generated documentation for src.data_collection.app.utils.data_collector module.</p>"},{"location":"src/data_collection/app/utils/data_collector/#datacollector_1","title":"DataCollector","text":"<p>Show source in data_collector.py:12</p> <p>Superclass for DataConsumer and DataProducer</p> <p>Manages Kafka, PostgreSQL and node connections.</p>"},{"location":"src/data_collection/app/utils/data_collector/#signature","title":"Signature","text":"<pre><code>class DataCollector:\ndef __init__(self, config: Config) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/utils/data_collector/#datacollectordecode_kafka_event","title":"DataCollector().decode_kafka_event","text":"<p>Show source in data_collector.py:49</p> <p>Decode a kafka event into a transaction hash and a data collection mode</p>"},{"location":"src/data_collection/app/utils/data_collector/#signature_1","title":"Signature","text":"<pre><code>def decode_kafka_event(self, event: str) -&gt; Tuple[str, DataCollectionMode]:\n...\n</code></pre>"},{"location":"src/data_collection/app/utils/data_collector/#datacollectorencode_kafka_event","title":"DataCollector().encode_kafka_event","text":"<p>Show source in data_collector.py:44</p> <p>Create kafka event from a transaction hash and a data collection mode</p>"},{"location":"src/data_collection/app/utils/data_collector/#signature_2","title":"Signature","text":"<pre><code>def encode_kafka_event(self, tx_hash: str, mode: DataCollectionMode) -&gt; str:\n...\n</code></pre>"},{"location":"src/data_collection/app/utils/enum_action/","title":"EnumAction","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Utils / EnumAction</p> <p>Auto-generated documentation for src.data_collection.app.utils.enum_action module.</p>"},{"location":"src/data_collection/app/utils/enum_action/#enumaction_1","title":"EnumAction","text":"<p>Show source in enum_action.py:6</p> <p>Argparse action for handling Enums, used for DataCollectionMode enum</p>"},{"location":"src/data_collection/app/utils/enum_action/#signature","title":"Signature","text":"<pre><code>class EnumAction(argparse.Action):\ndef __init__(self, **kwargs):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/","title":"Web3","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3</p> <p>Auto-generated documentation for src.data_collection.app.web3 module.</p>"},{"location":"src/data_collection/app/web3/#modules","title":"Modules","text":"<ul> <li>BlockExplorer</li> <li>NodeConnector</li> <li>Parser</li> <li>Flow of event extraction</li> </ul>"},{"location":"src/data_collection/app/web3/block_explorer/","title":"BlockExplorer","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / BlockExplorer</p> <p>Auto-generated documentation for src.data_collection.app.web3.block_explorer module.</p>"},{"location":"src/data_collection/app/web3/block_explorer/#blockexplorer_1","title":"BlockExplorer","text":"<p>Show source in block_explorer.py:10</p>"},{"location":"src/data_collection/app/web3/block_explorer/#attributes","title":"Attributes","text":"<ul> <li> <p><code>DEFAULT_START_BLOCK</code> - Start from the genesis block by default: <code>0</code></p> </li> <li> <p><code>DEFAULT_END_BLOCK</code> - End with the latest block by default: <code>None</code></p> </li> </ul> <p>Decide the start and end block numbers of the data collection process</p>"},{"location":"src/data_collection/app/web3/block_explorer/#signature","title":"Signature","text":"<pre><code>class BlockExplorer:\ndef __init__(\nself,\ndata_collection_cfg: DataCollectionConfig,\ndb: DatabaseManager,\nw3: NodeConnector,\n) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/block_explorer/#blockexplorerget_exploration_bounds","title":"BlockExplorer().get_exploration_bounds","text":"<p>Show source in block_explorer.py:29</p> <p>Determine the starting and ending block numbers based on configuration and database values</p>"},{"location":"src/data_collection/app/web3/block_explorer/#notes","title":"Notes","text":"<p>Configuration values take precedence over the database values.</p>"},{"location":"src/data_collection/app/web3/block_explorer/#signature_1","title":"Signature","text":"<pre><code>async def get_exploration_bounds(self) -&gt; ExplorationBounds:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/block_explorer/#see-also","title":"See also","text":"<ul> <li>ExplorationBounds</li> </ul>"},{"location":"src/data_collection/app/web3/node_connector/","title":"NodeConnector","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / NodeConnector</p> <p>Auto-generated documentation for src.data_collection.app.web3.node_connector module.</p>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnector_1","title":"NodeConnector","text":"<p>Show source in node_connector.py:70</p> <p>Connect to a blockchain node and scrape / mine data</p> <p>This class is responsible for all the web3 operations that are required by this app.</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature","title":"Signature","text":"<pre><code>class NodeConnector:\ndef __init__(\nself, node_url: str, timeout: int, retry_limit: int, retry_delay: int\n) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_block_data","title":"NodeConnector().get_block_data","text":"<p>Show source in node_connector.py:112</p> <p>Get block data by number/hash</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_1","title":"Signature","text":"<pre><code>async def get_block_data(self, block_id: str = \"latest\") -&gt; BlockData:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_block_reward","title":"NodeConnector().get_block_reward","text":"<p>Show source in node_connector.py:148</p> <p>Get block reward of a specific block</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_2","title":"Signature","text":"<pre><code>async def get_block_reward(self, block_id=\"latest\") -&gt; dict[str, Any]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_internal_transactions","title":"NodeConnector().get_internal_transactions","text":"<p>Show source in node_connector.py:160</p> <p>Get internal transaction data by hash</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_3","title":"Signature","text":"<pre><code>async def get_internal_transactions(self, tx_hash: str) -&gt; List[InternalTransactionData]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_latest_block_number","title":"NodeConnector().get_latest_block_number","text":"<p>Show source in node_connector.py:118</p> <p>Get latest block number</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_4","title":"Signature","text":"<pre><code>async def get_latest_block_number(self) -&gt; int:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_transaction_data","title":"NodeConnector().get_transaction_data","text":"<p>Show source in node_connector.py:122</p> <p>Get transaction data by hash</p>"},{"location":"src/data_collection/app/web3/node_connector/#returns","title":"Returns","text":"<p>tx_data (TransactionData) tx_data_dict (web3.TxData)</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_5","title":"Signature","text":"<pre><code>async def get_transaction_data(self, tx_hash: str) -&gt; Tuple[TransactionData, TxData]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#nodeconnectorget_transaction_receipt_data","title":"NodeConnector().get_transaction_receipt_data","text":"<p>Show source in node_connector.py:135</p> <p>Get transaction receipt data by hash</p>"},{"location":"src/data_collection/app/web3/node_connector/#returns_1","title":"Returns","text":"<p>tx_receipt_data (TransactionReceiptData) tx_receipt_data_dict (web3.TxReceipt)</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_6","title":"Signature","text":"<pre><code>async def get_transaction_receipt_data(\nself, tx_hash: str\n) -&gt; Tuple[TransactionReceiptData, TxReceipt]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#async_exception_retry_middleware","title":"async_exception_retry_middleware","text":"<p>Show source in node_connector.py:25</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_7","title":"Signature","text":"<pre><code>def async_exception_retry_middleware(\nmake_request: Callable[[RPCEndpoint, Any], RPCResponse],\nw3: AsyncWeb3,\nerrors: Collection[Type[BaseException]],\nretries: int,\ndelay: int,\n) -&gt; AsyncMiddlewareCoroutine:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/node_connector/#async_http_retry_request_middleware","title":"async_http_retry_request_middleware","text":"<p>Show source in node_connector.py:54</p>"},{"location":"src/data_collection/app/web3/node_connector/#signature_8","title":"Signature","text":"<pre><code>def async_http_retry_request_middleware(\nretries: int = 10, delay: int = 5\n) -&gt; AsyncMiddlewareCoroutine:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/","title":"Parser","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Parser</p> <p>Auto-generated documentation for src.data_collection.app.web3.parser module.</p>"},{"location":"src/data_collection/app/web3/parser/#contractparser","title":"ContractParser","text":"<p>Show source in parser.py:13</p> <p>Parse contract data</p>"},{"location":"src/data_collection/app/web3/parser/#signature","title":"Signature","text":"<pre><code>class ContractParser:\ndef __init__(\nself, web3: Web3, contracts: List[ContractConfig], contract_abi: ContractABI\n) -&gt; None:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparserget_contract","title":"ContractParser().get_contract","text":"<p>Show source in parser.py:85</p>"},{"location":"src/data_collection/app/web3/parser/#returns","title":"Returns","text":"<ul> <li><code>contract</code> - web3 Contract instance for a given contract address</li> </ul>"},{"location":"src/data_collection/app/web3/parser/#signature_1","title":"Signature","text":"<pre><code>def get_contract(self, contract_address: str, category: ContractCategory) -&gt; Contract:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparserget_contract_category","title":"ContractParser().get_contract_category","text":"<p>Show source in parser.py:31</p> <p>Get the contract category by contract address</p>"},{"location":"src/data_collection/app/web3/parser/#returns_1","title":"Returns","text":"<ul> <li><code>category</code> - ContractCategory</li> </ul>"},{"location":"src/data_collection/app/web3/parser/#signature_2","title":"Signature","text":"<pre><code>def get_contract_category(self, contract_address: str) -&gt; Optional[ContractCategory]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparserget_contract_events","title":"ContractParser().get_contract_events","text":"<p>Show source in parser.py:45</p> <p>Get the contract events by contract address</p>"},{"location":"src/data_collection/app/web3/parser/#returns_2","title":"Returns","text":"<ul> <li><code>List[str]</code> - list of event names</li> </ul>"},{"location":"src/data_collection/app/web3/parser/#signature_3","title":"Signature","text":"<pre><code>def get_contract_events(self, contract_address: str) -&gt; Optional[List[str]]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparserget_pair_contract_data","title":"ContractParser().get_pair_contract_data","text":"<p>Show source in parser.py:139</p> <p>Obtain required data for a (uniswap) pair contract from web3 and return a PairContractData instance</p>"},{"location":"src/data_collection/app/web3/parser/#returns_3","title":"Returns","text":"<p>a ContractData instance or <code>None</code></p>"},{"location":"src/data_collection/app/web3/parser/#signature_4","title":"Signature","text":"<pre><code>async def get_pair_contract_data(\nself, contract: Contract, category: ContractCategory\n) -&gt; Optional[PairContractData]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparserget_token_contract_data","title":"ContractParser().get_token_contract_data","text":"<p>Show source in parser.py:109</p> <p>Obtain required data for a token contract (ERC20, ERC721, ERC1155) from web3 and return a TokenContractData instance</p>"},{"location":"src/data_collection/app/web3/parser/#returns_4","title":"Returns","text":"<p>a ContractData instance or <code>None</code></p>"},{"location":"src/data_collection/app/web3/parser/#signature_5","title":"Signature","text":"<pre><code>async def get_token_contract_data(\nself, contract: Contract, category: ContractCategory\n) -&gt; Optional[TokenContractData]:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/parser/#contractparseris_known_contract_address","title":"ContractParser().is_known_contract_address","text":"<p>Show source in parser.py:74</p>"},{"location":"src/data_collection/app/web3/parser/#returns_5","title":"Returns","text":"<p><code>True</code> if a contract address is in the list of contracts (in the config), <code>False</code> otherwise</p>"},{"location":"src/data_collection/app/web3/parser/#notes","title":"Notes","text":"<p>If this method returns <code>True</code>, the consumer will handle the current transaction.</p>"},{"location":"src/data_collection/app/web3/parser/#signature_6","title":"Signature","text":"<pre><code>def is_known_contract_address(self, contract_address: str) -&gt; bool:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/","title":"Flow of event extraction","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/#get_transaction_events","title":"get_transaction_events","text":"<p>Show source in init.py:13</p> <p>It returns all the contract events found in the given contract with the given receipt.</p>"},{"location":"src/data_collection/app/web3/transaction_events/#signature","title":"Signature","text":"<pre><code>def get_transaction_events(\ncontract_category: ContractCategory,\ncontract: Union[Type[Contract], Contract],\nreceipt: TxReceipt,\n) -&gt; EventsGenerator:\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/#modules","title":"Modules","text":"<ul> <li>Decorator</li> <li>Erc20</li> <li>Erc721</li> <li>Types</li> <li>Uniswap Pair</li> <li>Uniswapv2 Factory</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/decorator/","title":"Decorator","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Decorator</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.decorator module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/erc20/","title":"Erc20","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Erc20</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.erc20 module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/erc721/","title":"Erc721","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Erc721</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.erc721 module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/","title":"Types","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Types</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.types module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#burnfungibleevent","title":"BurnFungibleEvent","text":"<p>Show source in types.py:25</p> <p>This represents burn event.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature","title":"Signature","text":"<pre><code>class BurnFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#burnnonfungibleevent","title":"BurnNonFungibleEvent","text":"<p>Show source in types.py:84</p> <p>This represents burn event. https://github.com/ethereum/solidity-underhanded-contest/blob/cc7834ec9e8c804fe9e02735f77ddb22e69f5891/2022/ submissions_2022/submission11_DanielVonFange/lib/openzeppelin-contracts/contracts/token/ERC721/ERC721.sol#L302</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_1","title":"Signature","text":"<pre><code>class BurnNonFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_1","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#burnpairevent","title":"BurnPairEvent","text":"<p>Show source in types.py:60</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_2","title":"Signature","text":"<pre><code>class BurnPairEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_2","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#contractevent","title":"ContractEvent","text":"<p>Show source in types.py:7</p> <p>Contract events are the emitted events by the contract included in the transaction receipt (output of the interaction with a smart contract).</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_3","title":"Signature","text":"<pre><code>class ContractEvent(BaseModel):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#mintfungibleevent","title":"MintFungibleEvent","text":"<p>Show source in types.py:17</p> <p>This represents mint event.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_4","title":"Signature","text":"<pre><code>class MintFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_3","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#mintnonfungibleevent","title":"MintNonFungibleEvent","text":"<p>Show source in types.py:76</p> <p>This represents mint event.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_5","title":"Signature","text":"<pre><code>class MintNonFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_4","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#mintpairevent","title":"MintPairEvent","text":"<p>Show source in types.py:54</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_6","title":"Signature","text":"<pre><code>class MintPairEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_5","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#paircreatedevent","title":"PairCreatedEvent","text":"<p>Show source in types.py:43</p> <p>This represents the creation a contract for trading the token pair.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_7","title":"Signature","text":"<pre><code>class PairCreatedEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_6","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#swappairevent","title":"SwapPairEvent","text":"<p>Show source in types.py:67</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_8","title":"Signature","text":"<pre><code>class SwapPairEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_7","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#transferfungibleevent","title":"TransferFungibleEvent","text":"<p>Show source in types.py:33</p> <p>This represents transfer event between two addreses.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_9","title":"Signature","text":"<pre><code>class TransferFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_8","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/types/#transfernonfungibleevent","title":"TransferNonFungibleEvent","text":"<p>Show source in types.py:96</p> <p>This represents transfer event of NFTs between two addresses.</p>"},{"location":"src/data_collection/app/web3/transaction_events/types/#signature_10","title":"Signature","text":"<pre><code>class TransferNonFungibleEvent(ContractEvent):\n...\n</code></pre>"},{"location":"src/data_collection/app/web3/transaction_events/types/#see-also_9","title":"See also","text":"<ul> <li>ContractEvent</li> </ul>"},{"location":"src/data_collection/app/web3/transaction_events/uniswap_pair/","title":"Uniswap Pair","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Uniswap Pair</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.uniswap_pair module.</p>"},{"location":"src/data_collection/app/web3/transaction_events/uniswapv2_factory/","title":"Uniswapv2 Factory","text":"<p>Blockchain data collection Index / <code>src</code> / <code>data_collection</code> / App / Web3 / Flow of event extraction / Uniswapv2 Factory</p> <p>Auto-generated documentation for src.data_collection.app.web3.transaction_events.uniswapv2_factory module.</p>"}]}